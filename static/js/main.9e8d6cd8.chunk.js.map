{"version":3,"sources":["Components/StyledLink.tsx","Utilities/getLocal.ts","Utilities/setLocal.ts","Hooks/useLocalState.ts","Pages/Entries.tsx","Utilities/random.ts","Pages/Home.tsx","Utilities/shuffle.ts","App.tsx","serviceWorker.ts","index.tsx","Images/GravelWorlds.png","Images/Ralph.gif","Images/Ralphette.gif","Images/RalphSr.gif"],"names":["StyledLink","styled","Link","getLocal","key","fromStorage","localStorage","getItem","JSON","parse","undefined","setLocal","value","initialValue","newValue","iv","currentValue","Function","setItem","stringify","removeItem","useLocalState","useState","error","console","log","storedValue","setStoredValue","Body","$theme","display","backgroundColor","colors","background","color","foreground","paddingTop","sizing","scale800","paddingBottom","paddingLeft","paddingRight","Form","width","marginRight","TableWrapper","flex","HomeLink","withStyle","position","bottom","scale400","left","primary200","Cell","StyledTableBodyCell","verticalAlign","HeadCell","StyledTableHeadCell","Entries","nameInputRef","useRef","name","setName","tickets","setTickets","importFile","setImportFile","entries","setEntries","useStyletron","css","theme","onImportSubmit","e","a","parser","columns","fromLine","reader","stream","getReader","on","record","parseInt","prevEntries","read","done","result","write","to","onSubmit","preventDefault","newEntries","current","focus","label","id","size","autoComplete","autoFocus","inputRef","onChange","event","currentTarget","type","onDrop","acceptedFiles","length","accept","className","flexDirection","alignItems","onClick","SIZE","compact","$style","overflow","map","entry","index","i","splice","marginTop","random","items","Math","floor","GIFS","Ralph","RalphSr","Ralphette","boxSizing","minHeight","minWidth","justifyContent","ImageWrapper","top","transform","animationDuration","ANIMATION_LENGTH","animationIterationCount","animationTimingFunction","animationName","from","willChange","height","zIndex","Cover","LogoCover","right","Image","Winner","textAlign","typography","font1450","DrawButton","Button","EntriesLink","LogoImage","Home","currentWinner","setCurrentWinner","drawingInProgress","setDrawingInProgress","image","ticketsRemaining","reduce","prev","src","disabled","hat","push","winner","j","shuffle","setTimeout","GravelWorlds","App","Styletron","LightTheme","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9e8d6cd8.chunk.js","sourcesContent":["import { styled } from \"baseui\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link, () => ({}));\n","export const getLocal = <S>(key: string) => {\n  const fromStorage = localStorage.getItem(key);\n  return fromStorage ? (JSON.parse(fromStorage) as S) : undefined;\n};\n","import { getLocal } from \"./getLocal\";\n\nconst getInitialValue = <S>(iv: (() => S) | S) => {\n  if (iv instanceof Function) {\n    return iv();\n  } else {\n    return iv;\n  }\n};\n\nexport const setLocal = <S>(\n  key: string,\n  value: S | ((prev: S) => S),\n  initialValue: (() => S) | S\n) => {\n  let newValue: S;\n  const currentValue = getLocal<S>(key);\n  if (value instanceof Function) {\n    newValue =\n      currentValue !== undefined\n        ? value(currentValue)\n        : value(getInitialValue(initialValue));\n  } else {\n    newValue = value;\n  }\n\n  if (newValue) {\n    localStorage.setItem(key, JSON.stringify(newValue));\n  } else {\n    localStorage.removeItem(key);\n  }\n};\n","import { Dispatch, SetStateAction, useState } from \"react\";\nimport { getLocal } from \"../Utilities/getLocal\";\nimport { setLocal } from \"../Utilities/setLocal\";\n\nexport const useLocalState = <S>(\n  key: string,\n  initialValue: (() => S) | S\n): [S, Dispatch<SetStateAction<S>>] => {\n  const [storedValue, setStoredValue] = useState<S>(() => {\n    const iv = initialValue instanceof Function ? initialValue() : initialValue;\n    try {\n      return getLocal<S>(key) ?? iv;\n    } catch (error) {\n      console.log(error);\n      return iv;\n    }\n  });\n\n  const setValue = (value: S | ((prev: S) => S)) => {\n    try {\n      setStoredValue(value);\n      setLocal(key, value, initialValue);\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n","import { styled, useStyletron, withStyle } from \"baseui\";\nimport { Button, SIZE } from \"baseui/button\";\nimport { FileUploader } from \"baseui/file-uploader\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\nimport {\n  StyledRoot,\n  StyledTable,\n  StyledTableBody,\n  StyledTableBodyCell,\n  StyledTableBodyRow,\n  StyledTableHead,\n  StyledTableHeadCell,\n  StyledTableHeadRow,\n} from \"baseui/table-semantic\";\nimport { H5 } from \"baseui/typography\";\nimport React, { useRef, useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { useLocalState } from \"../Hooks/useLocalState\";\nimport { setLocal } from \"../Utilities/setLocal\";\nimport parse from \"csv-parse\";\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  display: \"flex\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n}));\n\nconst Form = styled(\"form\", ({ $theme }) => ({\n  width: \"300px\",\n  marginRight: $theme.sizing.scale800,\n}));\n\nconst TableWrapper = styled(\"div\", ({ $theme }) => ({\n  flex: 1,\n}));\n\nconst HomeLink = withStyle<\n  typeof StyledLink,\n  React.ComponentProps<typeof StyledLink>\n>(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  left: $theme.sizing.scale400,\n  color: $theme.colors.primary200,\n}));\n\nconst Cell = withStyle(StyledTableBodyCell, ({ $theme }) => ({\n  verticalAlign: \"center\",\n}));\n\nconst HeadCell = withStyle(StyledTableHeadCell, ({ $theme }) => ({\n  verticalAlign: \"center\",\n}));\n\nexport const Entries: React.FC = () => {\n  const nameInputRef = useRef<any>(null);\n  const [name, setName] = useState<string>(\"\");\n  const [tickets, setTickets] = useState<string>(\"\");\n  const [importFile, setImportFile] = useState<File>();\n  const [entries, setEntries] = useLocalState<any[]>(\"entries\", []);\n  const [css, theme] = useStyletron();\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n    if (name && parseInt(tickets, 10) > 0) {\n      const newEntries = [\n        ...entries,\n        {\n          name,\n          tickets,\n        },\n      ];\n      setEntries(newEntries);\n      setName(\"\");\n      setTickets(\"\");\n      nameInputRef?.current?.focus();\n    }\n  };\n\n  const onImportSubmit = async (e: any) => {\n    const parser = parse({ columns: [\"name\", \"tickets\"], fromLine: 2 });\n    const reader = importFile!.stream().getReader();\n\n    parser.on(\"readable\", () => {\n      let record: { name: string; tickets: string };\n      while ((record = parser.read())) {\n        const { name, tickets } = record;\n        if (name && parseInt(tickets, 10) > 0) {\n          console.log(name);\n          console.log(tickets);\n          setEntries((prevEntries) => {\n            console.log(prevEntries);\n            return [\n              ...prevEntries,\n              {\n                name,\n                tickets,\n              },\n            ];\n          });\n        }\n      }\n    });\n\n    let done = false;\n\n    // read the stream from the file upload\n    do {\n      const result = await reader?.read();\n      if (result.value) {\n        parser.write(result.value, \"binary\");\n      }\n      done = result?.done;\n    } while (!done);\n\n    setImportFile(undefined);\n  };\n\n  const onImportDrop = (acceptedFiles: File[]) => {\n    if (acceptedFiles.length === 1) {\n      setImportFile(acceptedFiles[0]);\n    }\n  };\n\n  const onRemoveImport = () => {\n    setImportFile(undefined);\n  };\n\n  const onRemove = (i: number) => {\n    return () => {\n      const newEntries = [...entries];\n      newEntries.splice(i, 1);\n      setEntries(newEntries);\n    };\n  };\n\n  const onRemoveAll = () => {\n    setEntries([]);\n  };\n\n  return (\n    <Body>\n      <HomeLink to=\"/\">Home</HomeLink>\n      <div>\n        <H5>Add Entry</H5>\n        <Form onSubmit={onSubmit}>\n          <FormControl label=\"Name\">\n            <Input\n              id=\"name\"\n              value={name}\n              size=\"compact\"\n              autoComplete=\"off\"\n              autoFocus\n              inputRef={nameInputRef}\n              onChange={(event) => setName(event.currentTarget.value)}\n            />\n          </FormControl>\n          <FormControl label=\"Entries\">\n            <Input\n              id=\"entries\"\n              type=\"number\"\n              size=\"compact\"\n              autoComplete=\"off\"\n              value={tickets}\n              onChange={(event) => setTickets(event.currentTarget.value)}\n            />\n          </FormControl>\n          <Button type=\"submit\" size=\"compact\">\n            Add Entry\n          </Button>\n        </Form>\n        <H5>Import CSV</H5>\n        <Form onSubmit={onImportSubmit}>\n          <FormControl label=\"CSV with Entries\">\n            <>\n              {!importFile && (\n                <FileUploader onDrop={onImportDrop} accept=\"text/csv\" />\n              )}\n              {!!importFile && (\n                <div\n                  className={css({\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                  })}\n                >\n                  <div>{importFile.name}</div>\n                  <div className={css({ flex: 1 })} />\n                  <Button onClick={onRemoveImport} size={SIZE.compact}>\n                    𝗫\n                  </Button>\n                </div>\n              )}\n            </>\n          </FormControl>\n          <Button type=\"submit\" size=\"compact\">\n            Import File\n          </Button>\n        </Form>\n      </div>\n      <TableWrapper>\n        <StyledRoot $style={{ overflow: \"visible\" }}>\n          <StyledTable>\n            <StyledTableHead>\n              <StyledTableHeadRow>\n                <HeadCell>Name</HeadCell>\n                <HeadCell>Entries</HeadCell>\n                <HeadCell></HeadCell>\n              </StyledTableHeadRow>\n            </StyledTableHead>\n            <StyledTableBody>\n              {entries.map((entry: any, index: number) => (\n                <StyledTableBodyRow key={index}>\n                  <Cell>{entry.name}</Cell>\n                  <Cell>{entry.tickets}</Cell>\n                  <Cell>\n                    <Button size=\"compact\" onClick={onRemove(index)}>\n                      Remove Entry\n                    </Button>\n                  </Cell>\n                </StyledTableBodyRow>\n              ))}\n            </StyledTableBody>\n          </StyledTable>\n        </StyledRoot>\n        <Button\n          $style={{ marginTop: theme.sizing.scale400 }}\n          size=\"compact\"\n          onClick={() => onRemoveAll()}\n        >\n          Remove All Entries\n        </Button>\n      </TableWrapper>\n    </Body>\n  );\n};\n","export const random = (items: any[]) => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n","import { styled, withStyle } from \"baseui\";\nimport { Button } from \"baseui/button\";\nimport React, { useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { useLocalState } from \"../Hooks/useLocalState\";\nimport GravelWorlds from \"../Images/GravelWorlds.png\";\nimport Ralph from \"../Images/Ralph.gif\";\nimport Ralphette from \"../Images/Ralphette.gif\";\nimport RalphSr from \"../Images/RalphSr.gif\";\nimport { random } from \"../Utilities/random\";\nimport { setLocal } from \"../Utilities/setLocal\";\nimport { shuffle } from \"../Utilities/shuffle\";\n\nconst ANIMATION_LENGTH = 6000;\nconst GIFS = [Ralph, RalphSr, Ralphette];\n\nconst GIF_SIZE = \"65vh\";\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  boxSizing: \"border-box\",\n  position: \"absolute\",\n  minHeight: \"100vh\",\n  minWidth: \"100vw\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n  overflow: \"hidden\",\n}));\n\n// @ts-ignore\nconst ImageWrapper = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  top: \"40%\",\n  left: `-${GIF_SIZE}`,\n  transform: \"translate(0, -50%)\",\n  animationDuration: `${ANIMATION_LENGTH / 1000}s`,\n  animationIterationCount: \"1\",\n  animationTimingFunction: \"linear\",\n  animationName: {\n    from: {\n      transform: \"translate(0, -50%)\",\n    },\n    to: {\n      transform: `translate(calc(100vw + ${GIF_SIZE}), -50%)`,\n    },\n  },\n  willChange: \"transform\",\n  width: `${GIF_SIZE}`,\n  height: `${GIF_SIZE}`,\n  zIndex: 2,\n}));\n\nconst Cover = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: `${GIF_SIZE}`,\n  width: \"300vw\",\n  left: \"35%\",\n  top: \"0\",\n  backgroundColor: $theme.colors.background,\n}));\n\nconst LogoCover = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: \"240px\",\n  width: \"60px\",\n  right: \"-8px\",\n  bottom: \"0\",\n  backgroundColor: $theme.colors.background,\n}));\n\nconst Image = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: `${GIF_SIZE}`,\n  width: `${GIF_SIZE}`,\n}));\n\nconst Winner = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  display: \"block\",\n  textAlign: \"center\",\n  top: \"40%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\",\n  ...$theme.typography.font1450,\n}));\n\nconst DrawButton = styled(Button, ({ $theme }) => ({\n  position: \"absolute\",\n  top: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n}));\n\nconst EntriesLink = withStyle<\n  typeof StyledLink,\n  React.ComponentProps<typeof StyledLink>\n>(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n  color: $theme.colors.primary200,\n}));\n\n// keeping in here for later\n// const StyledBicycLincoln = styled(BicycLincoln, ({ $theme }) => ({\n//   position: \"absolute\",\n//   bottom: $theme.sizing.scale800,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   height: \"40px\",\n// }));\n\nconst LogoImage = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  left: \"50%\",\n  bottom: $theme.sizing.scale800,\n  transform: \"translateX(-50%)\",\n  height: \"20vh\",\n  zIndex: 1,\n}));\n\nexport const Home: React.FC = () => {\n  const [currentWinner, setCurrentWinner] = useState<string>(\"\");\n  const [entries, setEntries] = useLocalState<any[]>(\"entries\", []);\n  const [drawingInProgress, setDrawingInProgress] = useState<boolean>(false);\n  const image = random(GIFS);\n\n  const getNextWinner = () => {\n    setDrawingInProgress(true);\n    const hat = [];\n    for (const entry of entries) {\n      const tickets = entry.tickets;\n      const name = entry.name;\n      for (let i = 0; i < tickets; ++i) {\n        hat.push(name);\n      }\n    }\n    const winner = random(shuffle(hat));\n    setCurrentWinner(winner);\n\n    const newEntries = [...entries].map((entry) => {\n      return entry.name === winner\n        ? {\n            ...entry,\n            tickets: 0,\n          }\n        : entry;\n    });\n    setEntries(newEntries);\n    setTimeout(() => {\n      setDrawingInProgress(false);\n    }, ANIMATION_LENGTH);\n  };\n\n  const ticketsRemaining =\n    entries.length > 0\n      ? entries\n          .map((entry) => parseInt(entry.tickets, 10))\n          .reduce((prev, current) => prev + current)\n      : 0;\n\n  return (\n    <Body>\n      <Winner>{currentWinner}</Winner>\n\n      {drawingInProgress && (\n        <ImageWrapper>\n          <Cover />\n          <Image src={image} />\n          <LogoCover />\n        </ImageWrapper>\n      )}\n\n      <DrawButton\n        disabled={ticketsRemaining <= 0 || drawingInProgress}\n        type=\"button\"\n        size=\"compact\"\n        onClick={getNextWinner}\n      >\n        Draw Name\n      </DrawButton>\n\n      <EntriesLink to=\"/entries\">Entries</EntriesLink>\n      <LogoImage src={GravelWorlds} />\n    </Body>\n  );\n};\n","export const shuffle = (a: any[]) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n","import { BaseProvider, LightTheme } from \"baseui\";\nimport React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { Entries } from \"./Pages/Entries\";\nimport { Home } from \"./Pages/Home\";\n\nconst App: React.FC = () => {\n  return (\n    <StyletronProvider value={new Styletron()}>\n      <BaseProvider theme={LightTheme}>\n        <Router>\n          <Switch>\n            <Route path=\"/entries\">\n              <Entries />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/GravelWorlds.30bc2a0b.png\";","module.exports = __webpack_public_path__ + \"static/media/Ralph.8bdf1bcc.gif\";","module.exports = __webpack_public_path__ + \"static/media/Ralphette.e29bc649.gif\";","module.exports = __webpack_public_path__ + \"static/media/RalphSr.516831cd.gif\";"],"sourceRoot":""}