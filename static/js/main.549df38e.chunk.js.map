{"version":3,"sources":["Images/GravelWorlds.png","Images/Ralph.gif","Images/Ralphette.gif","Images/RalphSr.gif","Components/StyledLink.tsx","Utilities/setLocal.ts","Hooks/useLocalState.ts","Utilities/getLocal.ts","Pages/Entries.tsx","Utilities/random.ts","Pages/Home.tsx","Utilities/shuffle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledLink","styled","Link","setLocal","key","value","localStorage","setItem","JSON","stringify","useLocalState","initialValue","useState","iv","Function","fromStorage","getItem","parse","undefined","getLocal","error","console","log","storedValue","setStoredValue","valueToStore","Body","$theme","display","backgroundColor","colors","background","color","foreground","paddingTop","sizing","scale800","paddingBottom","paddingLeft","paddingRight","Form","width","marginRight","TableWrapper","flex","HomeLink","withStyle","position","bottom","scale400","left","primary200","Cell","StyledTableBodyCell","verticalAlign","HeadCell","StyledTableHeadCell","Entries","nameInputRef","useRef","name","setName","tickets","setTickets","entries","setEntries","to","onSubmit","e","preventDefault","parseInt","newEntries","current","focus","label","id","size","autoComplete","autoFocus","inputRef","onChange","event","currentTarget","type","$style","overflow","map","entry","index","onClick","i","splice","random","items","Math","floor","length","GIFS","Ralph","RalphSr","Ralphette","boxSizing","minHeight","minWidth","justifyContent","alignItems","ImageWrapper","top","transform","animationDuration","ANIMATION_LENGTH","animationIterationCount","animationTimingFunction","animationName","from","willChange","height","zIndex","Cover","LogoCover","right","Image","Winner","textAlign","typography","font1450","DrawButton","Button","EntriesLink","LogoImage","Home","currentWinner","setCurrentWinner","drawingInProgress","setDrawingInProgress","image","ticketsRemaining","reduce","prev","src","disabled","hat","push","winner","a","j","shuffle","setTimeout","GravelWorlds","App","Styletron","theme","LightTheme","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.549df38e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GravelWorlds.30bc2a0b.png\";","module.exports = __webpack_public_path__ + \"static/media/Ralph.8bdf1bcc.gif\";","module.exports = __webpack_public_path__ + \"static/media/Ralphette.e29bc649.gif\";","module.exports = __webpack_public_path__ + \"static/media/RalphSr.516831cd.gif\";","import { styled } from \"baseui\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link, () => ({}));\n","export const setLocal = <S>(key: string, value: S) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n","import { Dispatch, SetStateAction, useState } from \"react\";\nimport { getLocal } from \"../Utilities/getLocal\";\nimport { setLocal } from \"../Utilities/setLocal\";\n\nexport const useLocalState = <S>(\n  key: string,\n  initialValue: (() => S) | S\n): [S, Dispatch<SetStateAction<S>>] => {\n  const [storedValue, setStoredValue] = useState<S>(() => {\n    const iv = initialValue instanceof Function ? initialValue() : initialValue;\n    try {\n      return getLocal<S>(key) ?? iv;\n    } catch (error) {\n      console.log(error);\n      return iv;\n    }\n  });\n\n  const setValue = (value: S | ((prev: S) => S)) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      setLocal(key, valueToStore);\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n","export const getLocal = <S>(key: string) => {\n  const fromStorage = localStorage.getItem(key);\n  return fromStorage ? JSON.parse(fromStorage) as S : undefined;\n};\n","import { styled, withStyle } from \"baseui\";\nimport { Button } from \"baseui/button\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\nimport {\n  StyledRoot,\n  StyledTable,\n  StyledTableBody,\n  StyledTableBodyCell,\n  StyledTableBodyRow,\n  StyledTableHead,\n  StyledTableHeadCell,\n  StyledTableHeadRow,\n} from \"baseui/table-semantic\";\nimport React, { useRef, useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { useLocalState } from \"../Hooks/useLocalState\";\nimport { setLocal } from \"../Utilities/setLocal\";\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  display: \"flex\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n}));\n\nconst Form = styled(\"form\", ({ $theme }) => ({\n  width: \"300px\",\n  marginRight: $theme.sizing.scale800,\n}));\n\nconst TableWrapper = styled(\"div\", ({ $theme }) => ({\n  flex: 1,\n}));\n\nconst HomeLink = withStyle<\n  typeof StyledLink,\n  React.ComponentProps<typeof StyledLink>\n>(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  left: $theme.sizing.scale400,\n  color: $theme.colors.primary200,\n}));\n\nconst Cell = withStyle(StyledTableBodyCell, ({ $theme }) => ({\n  verticalAlign: \"center\",\n}));\n\nconst HeadCell = withStyle(StyledTableHeadCell, ({ $theme }) => ({\n  verticalAlign: \"center\",\n}));\n\nexport const Entries: React.FC = () => {\n  const nameInputRef = useRef<any>(null);\n  const [name, setName] = useState<string>(\"\");\n  const [tickets, setTickets] = useState<string>(\"\");\n  const [entries, setEntries] = useLocalState<any[]>(\"entries\", []);\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n    if (name && parseInt(tickets, 10) > 0) {\n      const newEntries = [\n        ...entries,\n        {\n          name,\n          tickets,\n        },\n      ];\n      setEntries(newEntries);\n      setLocal(\"entries\", newEntries);\n      setName(\"\");\n      setTickets(\"\");\n      nameInputRef?.current?.focus();\n    }\n  };\n\n  const onRemove = (i: number) => {\n    return () => {\n      const newEntries = [...entries];\n      newEntries.splice(i, 1);\n      setLocal(\"entries\", newEntries);\n      setEntries(newEntries);\n    };\n  };\n\n  const onRemoveAll = () => {\n    setLocal(\"entries\", []);\n    setEntries([]);\n  };\n\n  return (\n    <Body>\n      <HomeLink to=\"/\">Home</HomeLink>\n      <Form onSubmit={onSubmit}>\n        <FormControl label=\"Name\">\n          <Input\n            id=\"name\"\n            value={name}\n            size=\"compact\"\n            autoComplete=\"off\"\n            autoFocus\n            inputRef={nameInputRef}\n            onChange={(event) => setName(event.currentTarget.value)}\n          />\n        </FormControl>\n        <FormControl label=\"Entries\">\n          <Input\n            id=\"entries\"\n            type=\"number\"\n            size=\"compact\"\n            autoComplete=\"off\"\n            value={tickets}\n            onChange={(event) => setTickets(event.currentTarget.value)}\n          />\n        </FormControl>\n        <Button type=\"submit\" size=\"compact\">\n          Add Entry\n        </Button>\n      </Form>\n      <TableWrapper>\n        <StyledRoot $style={{ overflow: \"visible\" }}>\n          <StyledTable>\n            <StyledTableHead>\n              <StyledTableHeadRow>\n                <HeadCell>Name</HeadCell>\n                <HeadCell>Entries</HeadCell>\n                <HeadCell></HeadCell>\n              </StyledTableHeadRow>\n            </StyledTableHead>\n            <StyledTableBody>\n              {entries.map((entry: any, index: number) => (\n                <StyledTableBodyRow key={index}>\n                  <Cell>{entry.name}</Cell>\n                  <Cell>{entry.tickets}</Cell>\n                  <Cell>\n                    <Button size=\"compact\" onClick={onRemove(index)}>\n                      Remove Entry\n                    </Button>\n                  </Cell>\n                </StyledTableBodyRow>\n              ))}\n            </StyledTableBody>\n          </StyledTable>\n        </StyledRoot>\n        <Button size=\"compact\" onClick={() => onRemoveAll()}>\n          Remove All Entries\n        </Button>\n      </TableWrapper>\n    </Body>\n  );\n};\n","export const random = (items: any[]) => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n","import { styled, withStyle } from \"baseui\";\nimport { Button } from \"baseui/button\";\nimport React, { useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { useLocalState } from \"../Hooks/useLocalState\";\nimport GravelWorlds from \"../Images/GravelWorlds.png\";\nimport Ralph from \"../Images/Ralph.gif\";\nimport Ralphette from \"../Images/Ralphette.gif\";\nimport RalphSr from \"../Images/RalphSr.gif\";\nimport { random } from \"../Utilities/random\";\nimport { setLocal } from \"../Utilities/setLocal\";\nimport { shuffle } from \"../Utilities/shuffle\";\n\nconst ANIMATION_LENGTH = 6000;\nconst GIFS = [Ralph, RalphSr, Ralphette];\n\nconst GIF_SIZE = \"65vh\";\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  boxSizing: \"border-box\",\n  position: \"absolute\",\n  minHeight: \"100vh\",\n  minWidth: \"100vw\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n  overflow: \"hidden\",\n}));\n\n// @ts-ignore\nconst ImageWrapper = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  top: \"40%\",\n  left: `-${GIF_SIZE}`,\n  transform: \"translate(0, -50%)\",\n  animationDuration: `${ANIMATION_LENGTH / 1000}s`,\n  animationIterationCount: \"1\",\n  animationTimingFunction: \"linear\",\n  animationName: {\n    from: {\n      transform: \"translate(0, -50%)\",\n    },\n    to: {\n      transform: `translate(calc(100vw + ${GIF_SIZE}), -50%)`,\n    },\n  },\n  willChange: \"transform\",\n  width: `${GIF_SIZE}`,\n  height: `${GIF_SIZE}`,\n  zIndex: 2,\n}));\n\nconst Cover = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: `${GIF_SIZE}`,\n  width: \"300vw\",\n  left: \"35%\",\n  top: \"0\",\n  backgroundColor: $theme.colors.background,\n}));\n\nconst LogoCover = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: \"240px\",\n  width: \"60px\",\n  right: \"-8px\",\n  bottom: \"0\",\n  backgroundColor: $theme.colors.background,\n}));\n\nconst Image = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: `${GIF_SIZE}`,\n  width: `${GIF_SIZE}`,\n}));\n\nconst Winner = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  display: \"block\",\n  textAlign: \"center\",\n  top: \"40%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\",\n  ...$theme.typography.font1450,\n}));\n\nconst DrawButton = styled(Button, ({ $theme }) => ({\n  position: \"absolute\",\n  top: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n}));\n\nconst EntriesLink = withStyle<\n  typeof StyledLink,\n  React.ComponentProps<typeof StyledLink>\n>(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n  color: $theme.colors.primary200,\n}));\n\n// keeping in here for later\n// const StyledBicycLincoln = styled(BicycLincoln, ({ $theme }) => ({\n//   position: \"absolute\",\n//   bottom: $theme.sizing.scale800,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   height: \"40px\",\n// }));\n\nconst LogoImage = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  left: \"50%\",\n  bottom: $theme.sizing.scale800,\n  transform: \"translateX(-50%)\",\n  height: \"20vh\",\n  zIndex: 1\n}));\n\nexport const Home: React.FC = () => {\n  const [currentWinner, setCurrentWinner] = useState<string>(\"\");\n  const [entries, setEntries] = useLocalState<any[]>(\"entries\", []);\n  const [drawingInProgress, setDrawingInProgress] = useState<boolean>(false);\n  const image = random(GIFS);\n\n  const getNextWinner = () => {\n    setDrawingInProgress(true);\n    const hat = [];\n    for (const entry of entries) {\n      const tickets = entry.tickets;\n      const name = entry.name;\n      for (let i = 0; i < tickets; ++i) {\n        hat.push(name);\n      }\n    }\n    const winner = random(shuffle(hat));\n    setCurrentWinner(winner);\n\n    const newEntries = [...entries].map((entry) => {\n      return entry.name === winner\n        ? {\n            ...entry,\n            tickets: 0,\n          }\n        : entry;\n    });\n    setEntries(newEntries);\n    setLocal(\"entries\", newEntries);\n    setTimeout(() => {\n      setDrawingInProgress(false);\n    }, ANIMATION_LENGTH);\n  };\n\n  \n  const ticketsRemaining =\n    entries.length > 0\n      ? entries\n          .map((entry) => parseInt(entry.tickets, 10))\n          .reduce((prev, current) => prev + current)\n      : 0;\n\n  return (\n    <Body>\n      <Winner>{currentWinner}</Winner>\n\n      {drawingInProgress && (\n        <ImageWrapper>\n          <Cover />\n          <Image src={image} />\n          <LogoCover />\n        </ImageWrapper>\n      )}\n\n      <DrawButton\n        disabled={ticketsRemaining <= 0 || drawingInProgress}\n        type=\"button\"\n        size=\"compact\"\n        onClick={getNextWinner}\n      >\n        Draw Name\n      </DrawButton>\n\n      <EntriesLink to=\"/entries\">Entries</EntriesLink>\n      <LogoImage src={GravelWorlds} />\n    </Body>\n  );\n};\n","export const shuffle = (a: any[]) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n","import { BaseProvider, LightTheme } from \"baseui\";\nimport React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { Entries } from \"./Pages/Entries\";\nimport { Home } from \"./Pages/Home\";\n\nconst App: React.FC = () => {\n  return (\n    <StyletronProvider value={new Styletron()}>\n      <BaseProvider theme={LightTheme}>\n        <Router>\n          <Switch>\n            <Route path=\"/entries\">\n              <Entries />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}