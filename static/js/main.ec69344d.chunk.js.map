{"version":3,"sources":["Images/Ralph.gif","Images/Ralphette.gif","Images/RalphSr.gif","Components/StyledLink.tsx","Utilities.ts","Pages/Entries.tsx","Pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledLink","styled","Link","$theme","getLocal","key","fromStorage","localStorage","getItem","JSON","parse","setLocal","value","toStorage","setItem","stringify","random","items","Math","floor","length","Body","Block","display","minHeight","backgroundColor","colors","background","color","foreground","paddingTop","sizing","scale800","paddingBottom","paddingLeft","paddingRight","Form","width","marginRight","Table","flex","HomeLink","position","bottom","scale400","left","primary200","Entries","useState","name","setName","tickets","setTickets","entries","setEntries","to","onSubmit","e","preventDefault","parseInt","newEntries","label","id","size","autoComplete","autoFocus","onChange","event","currentTarget","type","map","entry","index","onClick","i","splice","GIFS","Ralph","RalphSr","Ralphette","boxSizing","minWidth","justifyContent","alignItems","overflow","ImageWrapper","top","transform","animationDuration","ANIMATION_LENGTH","animationIterationCount","animationTimingFunction","animationName","from","willChange","height","Cover","LogoCover","right","Image","Winner","textAlign","typography","font1450","DrawButton","Button","EntriesLink","Home","currentWinner","setCurrentWinner","drawingInProgress","setDrawingInProgress","image","ticketsRemaining","reduce","prev","current","src","disabled","hat","push","winner","a","j","shuffle","setTimeout","App","Styletron","theme","LightTheme","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec69344d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ralph.8bdf1bcc.gif\";","module.exports = __webpack_public_path__ + \"static/media/Ralphette.e29bc649.gif\";","module.exports = __webpack_public_path__ + \"static/media/RalphSr.516831cd.gif\";","import { styled } from \"baseui\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link, ({ $theme }) => ({}));\n","export const getLocal = (key: string) => {\n  const fromStorage = localStorage.getItem(key);\n  return fromStorage ? JSON.parse(fromStorage) : null;\n};\n\nexport const setLocal = (key: string, value: any) => {\n  const toStorage = value;\n  localStorage.setItem(key, JSON.stringify(toStorage));\n};\n\nexport const shuffle = (a: any[]) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n\nexport const random = (items: any[]) => {\n  return items[Math.floor(Math.random()*items.length)];\n}\n","import { styled } from \"baseui\";\nimport { Block } from \"baseui/block\";\nimport { Button } from \"baseui/button\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\nimport {\n  StyledBody,\n  StyledCell,\n  StyledHead,\n  StyledHeadCell,\n  StyledRow,\n  StyledTable\n} from \"baseui/table\";\nimport React, { useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { getLocal, setLocal } from \"../Utilities\";\n\nconst Body = styled(Block, ({ $theme }) => ({\n  display: \"flex\",\n  minHeight: \"100vh\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800\n}));\n\nconst Form = styled(\"form\", ({ $theme }) => ({\n  width: \"300px\",\n  marginRight: $theme.sizing.scale800\n}));\n\nconst Table = styled(Block, ({ $theme }) => ({\n  flex: 1\n}));\n\nconst HomeLink = styled(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  left: $theme.sizing.scale400,\n  color: $theme.colors.primary200\n}));\n\nexport const Entries: React.FC = () => {\n  const [name, setName] = useState<string>(\"\");\n  const [tickets, setTickets] = useState<string>(\"\");\n  const [entries, setEntries] = useState<any[]>(getLocal(\"entries\") || []);\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n    if (name && parseInt(tickets, 10) > 0) {\n      const newEntries = [\n        ...entries,\n        {\n          name,\n          tickets\n        }\n      ];\n      setEntries(newEntries);\n      setLocal(\"entries\", newEntries);\n      setName(\"\");\n      setTickets(\"\");\n    }\n  };\n\n  const onRemove = (i: number) => {\n    return (e: any) => {\n      const newEntries = [...entries];\n      newEntries.splice(i, 1);\n      setLocal(\"entries\", newEntries);\n      setEntries(newEntries);\n    };\n  };\n\n  return (\n    <Body>\n      <HomeLink to=\"/\">Home</HomeLink>\n      <Form onSubmit={onSubmit}>\n        <FormControl label=\"Name\">\n          <Input\n            id=\"name\"\n            value={name}\n            size=\"compact\"\n            autoComplete=\"off\"\n            autoFocus\n            onChange={event => setName(event.currentTarget.value)}\n          />\n        </FormControl>\n        <FormControl label=\"Entries\">\n          <Input\n            id=\"entries\"\n            type=\"number\"\n            size=\"compact\"\n            autoComplete=\"off\"\n            value={tickets}\n            onChange={event => setTickets(event.currentTarget.value)}\n          />\n        </FormControl>\n        <Button type=\"submit\" size=\"compact\">\n          Add Entry\n        </Button>\n      </Form>\n      <Table>\n        <StyledTable>\n          <StyledHead>\n            <StyledHeadCell>Name</StyledHeadCell>\n            <StyledHeadCell>Tickets</StyledHeadCell>\n            <StyledHeadCell></StyledHeadCell>\n          </StyledHead>\n          <StyledBody>\n            {entries.map((entry: any, index: number) => (\n              <StyledRow key={index}>\n                <StyledCell>{entry.name}</StyledCell>\n                <StyledCell>{entry.tickets}</StyledCell>\n                <StyledCell>\n                  <Button size=\"compact\" onClick={onRemove(index)}>\n                    Remove\n                  </Button>\n                </StyledCell>\n              </StyledRow>\n            ))}\n          </StyledBody>\n        </StyledTable>\n      </Table>\n    </Body>\n  );\n};\n","import { styled } from \"baseui\";\nimport { Block } from \"baseui/block\";\nimport { Button } from \"baseui/button\";\nimport React, { useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport Ralph from \"../Images/Ralph.gif\";\nimport Ralphette from \"../Images/Ralphette.gif\";\nimport RalphSr from \"../Images/RalphSr.gif\";\nimport { getLocal, random, setLocal, shuffle } from \"../Utilities\";\n\nconst ANIMATION_LENGTH = 8000;\nconst GIFS = [Ralph, RalphSr, Ralphette];\n\nconst Body = styled(Block, ({ $theme }) => ({\n  boxSizing: \"border-box\",\n  position: \"absolute\",\n  minHeight: \"100vh\",\n  minWidth: \"100vw\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n  overflow: \"hidden\"\n}));\n\n// @ts-ignore\nconst ImageWrapper = styled(Block, ({ $theme }) => ({\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"-600px\",\n  transform: \"translate(0, -50%)\",\n  animationDuration: `${ANIMATION_LENGTH / 1000}s`,\n  animationIterationCount: \"1\",\n  animationTimingFunction: \"linear\",\n  animationName: {\n    from: {\n      transform: \"translate(0, -50%)\"\n    },\n    to: {\n      transform: \"translate(calc(100vw + 600px), -50%)\"\n    }\n  },\n  willChange: \"transform\",\n  width: \"600px\",\n  height: \"600px\"\n}));\n\nconst Cover = styled(Block, ({ $theme }) => ({\n  position: \"absolute\",\n  height: \"600px\",\n  width: \"300vw\",\n  left: \"35%\",\n  top: \"0\",\n  backgroundColor: $theme.colors.background\n}));\n\nconst LogoCover = styled(Block, ({ $theme }) => ({\n  position: \"absolute\",\n  height: \"240px\",\n  width: \"60px\",\n  right: \"0\",\n  bottom: \"0\",\n  backgroundColor: $theme.colors.background\n}));\n\nconst Image = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  height: \"600px\",\n  width: \"600px\"\n}));\n\nconst Winner = styled(Block, ({ $theme }) => ({\n  position: \"absolute\",\n  display: \"block\",\n  textAlign: \"center\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\",\n  ...$theme.typography.font1450\n}));\n\nconst DrawButton = styled(Button, ({ $theme }) => ({\n  position: \"absolute\",\n  top: $theme.sizing.scale400,\n  right: $theme.sizing.scale400\n}));\n\nconst EntriesLink = styled(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n  color: $theme.colors.primary200\n}));\n\nexport const Home: React.FC = () => {\n  const [currentWinner, setCurrentWinner] = useState<string>(\"\");\n  const [entries, setEntries] = useState<any[]>(getLocal(\"entries\") || []);\n  const [drawingInProgress, setDrawingInProgress] = useState<boolean>(false);\n  const image = random(GIFS);\n\n  const getNextWinner = () => {\n    setDrawingInProgress(true);\n    const hat = [];\n    for (const entry of entries) {\n      const tickets = entry.tickets;\n      const name = entry.name;\n      for (let i = 0; i < tickets; ++i) {\n        hat.push(name);\n      }\n    }\n    const winner = random(shuffle(hat));\n    setCurrentWinner(winner);\n\n    const newEntries = [...entries].map(entry => {\n      return entry.name === winner\n        ? {\n            ...entry,\n            tickets: 0\n          }\n        : entry;\n    });\n    setEntries(newEntries);\n    setLocal(\"entries\", newEntries);\n    setTimeout(() => {\n      setDrawingInProgress(false);\n    }, ANIMATION_LENGTH);\n  };\n\n  const ticketsRemaining =\n    entries.length > 0\n      ? entries\n          .map(entry => parseInt(entry.tickets, 10))\n          .reduce((prev, current) => prev + current)\n      : 0;\n\n  return (\n    <Body>\n      <Winner>{currentWinner}</Winner>\n\n      {drawingInProgress && (\n        <ImageWrapper>\n          <Cover />\n          <Image src={image} />\n          <LogoCover />\n        </ImageWrapper>\n      )}\n\n      <DrawButton\n        disabled={ticketsRemaining <= 0 || drawingInProgress}\n        type=\"button\"\n        size=\"compact\"\n        onClick={getNextWinner}\n      >\n        Draw Name\n      </DrawButton>\n\n      <EntriesLink to=\"/entries\">Entries</EntriesLink>\n    </Body>\n  );\n};\n","import React from \"react\";\nimport { BaseProvider, LightTheme } from \"baseui\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport { Entries } from \"./Pages/Entries\"\nimport { Home } from \"./Pages/Home\"\n\nconst App: React.FC = () => {\n  return (\n    <StyletronProvider value={new Styletron()}>\n      <BaseProvider theme={LightTheme}>\n        <Router>\n          <Switch>\n            <Route path=\"/entries\">\n              <Entries />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}