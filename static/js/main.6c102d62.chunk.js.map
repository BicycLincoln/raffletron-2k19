{"version":3,"sources":["Images/GravelWorlds.png","Images/Ralph.gif","Images/Ralphette.gif","Images/RalphSr.gif","Components/StyledLink.tsx","Utilities/getLocal.ts","Utilities/setLocal.ts","Hooks/useLocalState.ts","Pages/Entries.tsx","Utilities/random.ts","Pages/Home.tsx","Utilities/shuffle.ts","Pages/Countdown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledLink","styled","Link","getLocal","key","fromStorage","localStorage","getItem","JSON","parse","undefined","setLocal","value","initialValue","newValue","iv","currentValue","Function","setItem","stringify","removeItem","useLocalState","useState","error","console","log","storedValue","setStoredValue","Body","$theme","display","backgroundColor","colors","background","color","foreground","paddingTop","sizing","scale800","paddingBottom","paddingLeft","paddingRight","Form","width","marginRight","TableWrapper","flex","HomeLink","withStyle","position","bottom","scale400","left","primary200","Cell","StyledTableBodyCell","verticalAlign","HeadCell","StyledTableHeadCell","Entries","nameInputRef","useRef","importing","setImporting","name","setName","tickets","setTickets","importFile","setImportFile","entries","setEntries","useStyletron","css","theme","onImportSubmit","e","a","importEntries","worker","header","step","data","entry","Object","keys","map","toLocaleLowerCase","push","complete","to","onSubmit","preventDefault","parseInt","newEntries","current","focus","label","id","size","autoComplete","autoFocus","inputRef","onChange","event","currentTarget","type","onDrop","acceptedFiles","length","accept","className","flexDirection","alignItems","onClick","SIZE","compact","isLoading","disabled","$style","overflow","index","i","splice","marginTop","random","items","Math","floor","GIFS","Ralph","RalphSr","Ralphette","VH","VMAX","S","ms","boxSizing","minHeight","minWidth","justifyContent","BodyInner","zIndex","ImageWrapper","top","transform","animationDuration","animationIterationCount","animationTimingFunction","animationName","from","willChange","GIF_SIZE","height","Image","WinnerWrapper","animationFillMode","WinnerInnerWrapper","Winner","textAlign","typography","font1450","fontSize","lineHeight","fontFamily","DrawButton","Button","right","EntriesLink","LogoImage","opacity","Home","currentWinner","setCurrentWinner","previousWinner","setPreviousWinner","drawingInProgress","setDrawingInProgress","image","entriesRemaining","reduce","prev","src","Boolean","hat","winner","j","shuffle","setTimeout","GravelWorlds","Timer","scale4800","TimerBlock","TimerSep","Countdown","ToDate","useMemo","fromUnixTime","differenceInSeconds","Date","secondsRemaining","setSecondsRemaining","setInterval","hoursCountdown","minutesCountdown","secondsCountdown","padStart","App","Styletron","LightTheme","path","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c102d62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GravelWorlds.30bc2a0b.png\";","module.exports = __webpack_public_path__ + \"static/media/Ralph.8bdf1bcc.gif\";","module.exports = __webpack_public_path__ + \"static/media/Ralphette.e29bc649.gif\";","module.exports = __webpack_public_path__ + \"static/media/RalphSr.516831cd.gif\";","import { styled } from \"baseui\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link, () => ({}));\n","export const getLocal = <S>(key: string) => {\n  const fromStorage = localStorage.getItem(key);\n  return fromStorage ? (JSON.parse(fromStorage) as S) : undefined;\n};\n","import { getLocal } from \"./getLocal\";\n\nconst getInitialValue = <S>(iv: (() => S) | S) => {\n  if (iv instanceof Function) {\n    return iv();\n  } else {\n    return iv;\n  }\n};\n\nexport const setLocal = <S>(\n  key: string,\n  value: S | ((prev: S) => S),\n  initialValue: (() => S) | S\n) => {\n  let newValue: S;\n  const currentValue = getLocal<S>(key);\n  if (value instanceof Function) {\n    newValue =\n      currentValue !== undefined\n        ? value(currentValue)\n        : value(getInitialValue(initialValue));\n  } else {\n    newValue = value;\n  }\n\n  if (newValue) {\n    localStorage.setItem(key, JSON.stringify(newValue));\n  } else {\n    localStorage.removeItem(key);\n  }\n};\n","import { Dispatch, SetStateAction, useState } from \"react\";\nimport { getLocal } from \"../Utilities/getLocal\";\nimport { setLocal } from \"../Utilities/setLocal\";\n\nexport const useLocalState = <S>(\n  key: string,\n  initialValue: (() => S) | S\n): [S, Dispatch<SetStateAction<S>>] => {\n  const [storedValue, setStoredValue] = useState<S>(() => {\n    const iv = initialValue instanceof Function ? initialValue() : initialValue;\n    try {\n      return getLocal<S>(key) ?? iv;\n    } catch (error) {\n      console.log(error);\n      return iv;\n    }\n  });\n\n  const setValue = (value: S | ((prev: S) => S)) => {\n    try {\n      setStoredValue(value);\n      setLocal(key, value, initialValue);\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n","import { styled, useStyletron, withStyle } from \"baseui\";\nimport { Button, SIZE } from \"baseui/button\";\nimport { FileUploader } from \"baseui/file-uploader\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\nimport {\n  StyledRoot,\n  StyledTable,\n  StyledTableBody,\n  StyledTableBodyCell,\n  StyledTableBodyRow,\n  StyledTableHead,\n  StyledTableHeadCell,\n  StyledTableHeadRow,\n} from \"baseui/table-semantic\";\nimport { H5 } from \"baseui/typography\";\nimport { parse } from \"papaparse\";\nimport React, { useRef, useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { useLocalState } from \"../Hooks/useLocalState\";\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  display: \"flex\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n}));\n\nconst Form = styled(\"form\", ({ $theme }) => ({\n  width: \"300px\",\n  marginRight: $theme.sizing.scale800,\n}));\n\nconst TableWrapper = styled(\"div\", ({ $theme }) => ({\n  flex: 1,\n}));\n\nconst HomeLink = withStyle<\n  typeof StyledLink,\n  React.ComponentProps<typeof StyledLink>\n>(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  left: $theme.sizing.scale400,\n  color: $theme.colors.primary200,\n}));\n\nconst Cell = withStyle(StyledTableBodyCell, ({ $theme }) => ({\n  verticalAlign: \"center\",\n}));\n\nconst HeadCell = withStyle(StyledTableHeadCell, ({ $theme }) => ({\n  verticalAlign: \"center\",\n}));\n\nexport const Entries: React.FC = () => {\n  const nameInputRef = useRef<any>(null);\n  const [importing, setImporting] = useState<boolean>(false);\n  const [name, setName] = useState<string>(\"\");\n  const [tickets, setTickets] = useState<string>(\"\");\n  const [importFile, setImportFile] = useState<File>();\n  const [entries, setEntries] = useLocalState<any[]>(\"entries\", []);\n  const [css, theme] = useStyletron();\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n    if (name && parseInt(tickets, 10) > 0) {\n      const newEntries = [\n        ...entries,\n        {\n          name,\n          entries: tickets,\n        },\n      ];\n      setEntries(newEntries);\n      setName(\"\");\n      setTickets(\"\");\n      nameInputRef?.current?.focus();\n    }\n  };\n\n  const onImportSubmit = async (e: any) => {\n    if (importFile) {\n      const importEntries: any[] = [];\n      setImporting(true);\n      parse(importFile, {\n        worker: true,\n        header: true,\n        step: ({ data }: any) => {\n          const entry: any = {};\n          const keys = Object.keys(data);\n          keys.map((key) => {\n            entry[key.toLocaleLowerCase()] = data[key];\n          });\n          importEntries.push(entry);\n        },\n        complete: () => {\n          setImporting(false);\n          setEntries((entries) => {\n            return [...entries, ...importEntries];\n          });\n        },\n      });\n    }\n    setImportFile(undefined);\n  };\n\n  const onImportDrop = (acceptedFiles: File[]) => {\n    if (acceptedFiles.length === 1) {\n      setImportFile(acceptedFiles[0]);\n    }\n  };\n\n  const onRemoveImport = () => {\n    setImportFile(undefined);\n  };\n\n  const onRemove = (i: number) => {\n    return () => {\n      const newEntries = [...entries];\n      newEntries.splice(i, 1);\n      setEntries(newEntries);\n    };\n  };\n\n  const onRemoveAll = () => {\n    setEntries([]);\n  };\n\n  return (\n    <Body>\n      <HomeLink to=\"/\">Home</HomeLink>\n      <div>\n        <H5>Add Entry</H5>\n        <Form onSubmit={onSubmit}>\n          <FormControl label=\"Name\">\n            <Input\n              id=\"name\"\n              value={name}\n              size=\"compact\"\n              autoComplete=\"off\"\n              autoFocus\n              inputRef={nameInputRef}\n              onChange={(event) => setName(event.currentTarget.value)}\n            />\n          </FormControl>\n          <FormControl label=\"Entries\">\n            <Input\n              id=\"entries\"\n              type=\"number\"\n              size=\"compact\"\n              autoComplete=\"off\"\n              value={tickets}\n              onChange={(event) => setTickets(event.currentTarget.value)}\n            />\n          </FormControl>\n          <Button type=\"submit\" size=\"compact\">\n            Add Entry\n          </Button>\n        </Form>\n        <H5>Import CSV</H5>\n        <Form onSubmit={onImportSubmit}>\n          <FormControl label=\"CSV with Entries\">\n            <>\n              {!importFile && (\n                <FileUploader onDrop={onImportDrop} accept=\"text/csv\" />\n              )}\n              {!!importFile && (\n                <div\n                  className={css({\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                  })}\n                >\n                  <div>{importFile.name}</div>\n                  <div className={css({ flex: 1 })} />\n                  <Button onClick={onRemoveImport} size={SIZE.compact}>\n                    𝗫\n                  </Button>\n                </div>\n              )}\n            </>\n          </FormControl>\n          <Button\n            isLoading={importing}\n            disabled={importing}\n            type=\"submit\"\n            size=\"compact\"\n          >\n            Import File\n          </Button>\n        </Form>\n      </div>\n      <TableWrapper>\n        <StyledRoot $style={{ overflow: \"visible\" }}>\n          <StyledTable>\n            <StyledTableHead>\n              <StyledTableHeadRow>\n                <HeadCell>Name</HeadCell>\n                <HeadCell>Entries</HeadCell>\n                <HeadCell></HeadCell>\n              </StyledTableHeadRow>\n            </StyledTableHead>\n            <StyledTableBody>\n              {entries.map((entry: any, index: number) => (\n                <StyledTableBodyRow key={index}>\n                  <Cell>{entry.name}</Cell>\n                  <Cell>{entry.entries}</Cell>\n                  <Cell>\n                    <Button size=\"compact\" onClick={onRemove(index)}>\n                      Remove Entry\n                    </Button>\n                  </Cell>\n                </StyledTableBodyRow>\n              ))}\n            </StyledTableBody>\n          </StyledTable>\n        </StyledRoot>\n        <Button\n          $style={{ marginTop: theme.sizing.scale400 }}\n          size=\"compact\"\n          onClick={() => onRemoveAll()}\n        >\n          Remove All Entries\n        </Button>\n      </TableWrapper>\n    </Body>\n  );\n};\n","export const random = (items: any[]) => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n","import { styled, withStyle } from \"baseui\";\nimport { Button } from \"baseui/button\";\nimport React, { useState } from \"react\";\nimport { StyledLink } from \"../Components/StyledLink\";\nimport { useLocalState } from \"../Hooks/useLocalState\";\nimport GravelWorlds from \"../Images/GravelWorlds.png\";\nimport Ralph from \"../Images/Ralph.gif\";\nimport Ralphette from \"../Images/Ralphette.gif\";\nimport RalphSr from \"../Images/RalphSr.gif\";\nimport { random } from \"../Utilities/random\";\nimport { shuffle } from \"../Utilities/shuffle\";\n\nconst ANIMATION_LENGTH = 3000;\nconst GIFS = [Ralph, RalphSr, Ralphette];\n\nconst GIF_SIZE = 65;\n\nconst VH = (value: number) => `${value}vh`;\nconst VMAX = (value: number) => `${value}vmax`;\nconst VMIN = (value: number) => `${value}vmin`;\nconst S = (ms: number) => `${ms / 1000}s`;\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  boxSizing: \"border-box\",\n  position: \"absolute\",\n  minHeight: \"100vh\",\n  minWidth: \"100vw\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  overflow: \"hidden\",\n}));\n\nconst BodyInner = styled(\"div\", () => ({\n  position: \"absolute\",\n  minHeight: \"100%\",\n  minWidth: \"100%\",\n  zIndex: 2,\n}));\n\n// @ts-ignore\nconst ImageWrapper = styled(\"div\", () => ({\n  position: \"absolute\",\n  top: \"50%\",\n  left: `-${VH(GIF_SIZE)}`,\n  transform: \"translate(0, -50%)\",\n  animationDuration: `${S(ANIMATION_LENGTH)}`,\n  animationIterationCount: \"1\",\n  animationTimingFunction: \"linear\",\n  animationName: {\n    from: {\n      transform: \"translate(0, -50%)\",\n    },\n    to: {\n      transform: `translate(${VMAX(100 + GIF_SIZE)}, -50%)`,\n    },\n  },\n  willChange: \"transform\",\n  width: `${VH(GIF_SIZE - 6.8)}`,\n  height: `${VH(GIF_SIZE)}`,\n  zIndex: 2,\n  overflow: \"hidden\",\n}));\n\nconst Image = styled(\"img\", () => ({\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  height: `${VH(GIF_SIZE)}`,\n  width: `${VH(GIF_SIZE)}`,\n}));\n\nconst OFFSET = -25;\n\n//@ts-ignore\nconst WinnerWrapper = styled(\"div\", () => ({\n  position: \"absolute\",\n  top: 0,\n  left: `-${VH(GIF_SIZE + OFFSET)}`,\n  width: 0,\n  height: \"100vh\",\n  overflow: \"hidden\",\n  animationFillMode: \"forwards\",\n  animationDuration: `${S(ANIMATION_LENGTH)}`,\n  animationIterationCount: \"1\",\n  animationTimingFunction: \"linear\",\n  animationName: {\n    from: {\n      width: 0,\n    },\n    to: {\n      width: `${VMAX(100 + GIF_SIZE)}`,\n    },\n  },\n}));\n\nconst WinnerInnerWrapper = styled(\"div\", () => ({\n  position: \"absolute\",\n  top: 0,\n  left: `${VH(GIF_SIZE + OFFSET)}`,\n  width: \"100vw\",\n  height: \"100vh\",\n}));\n\nconst Winner = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  display: \"block\",\n  textAlign: \"center\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\",\n  ...$theme.typography.font1450,\n  fontSize: `${VMIN(16)}`,\n  lineHeight: \"1.05em\",\n  fontFamily: \"'Permanent Marker', cursive\",\n}));\n\nconst DrawButton = styled(Button, ({ $theme }) => ({\n  position: \"absolute\",\n  top: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n}));\n\nconst EntriesLink = withStyle<\n  typeof StyledLink,\n  React.ComponentProps<typeof StyledLink>\n>(StyledLink, ({ $theme }) => ({\n  position: \"absolute\",\n  bottom: $theme.sizing.scale400,\n  right: $theme.sizing.scale400,\n  color: $theme.colors.primary200,\n}));\n\n// keeping in here for later\n// const StyledBicycLincoln = styled(BicycLincoln, ({ $theme }) => ({\n//   position: \"absolute\",\n//   bottom: $theme.sizing.scale800,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   height: \"40px\",\n// }));\n\nconst LogoImage = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translateX(-50%) translateY(-50%)\",\n  height: \"80vh\",\n  opacity: 0.25,\n  zIndex: 1,\n}));\n\nexport const Home: React.FC = () => {\n  const [currentWinner, setCurrentWinner] = useState<string>(\"\");\n  const [previousWinner, setPreviousWinner] = useState<string | null>(null);\n  const [entries, setEntries] = useLocalState<any[]>(\"entries\", []);\n  const [drawingInProgress, setDrawingInProgress] = useState<boolean>(false);\n  const image = random(GIFS);\n\n  const getNextWinner = () => {\n    setPreviousWinner(null);\n    setDrawingInProgress(true);\n    const hat = [];\n    for (const entry of entries) {\n      const entries = entry.entries;\n      const name = entry.name;\n      for (let i = 0; i < entries; ++i) {\n        hat.push(name);\n      }\n    }\n    const winner = random(shuffle(hat));\n    setCurrentWinner(winner);\n\n    const newEntries = [...entries].map((entry) => {\n      return entry.name === winner\n        ? {\n            ...entry,\n            entries: 0,\n          }\n        : entry;\n    });\n    setEntries(newEntries);\n    setTimeout(() => {\n      setPreviousWinner(winner);\n      setDrawingInProgress(false);\n    }, ANIMATION_LENGTH);\n  };\n\n  const entriesRemaining =\n    entries.length > 0\n      ? entries\n          .map((entry) => parseInt(entry.entries, 10))\n          .reduce((prev, current) => prev + current)\n      : 0;\n\n  return (\n    <Body>\n      <BodyInner>\n        {drawingInProgress && (\n          <>\n            <WinnerWrapper>\n              <WinnerInnerWrapper>\n                <Winner>{currentWinner}</Winner>\n              </WinnerInnerWrapper>\n            </WinnerWrapper>\n            <ImageWrapper>\n              <Image src={image} />\n            </ImageWrapper>\n          </>\n        )}\n\n        {Boolean(previousWinner) && <Winner>{previousWinner}</Winner>}\n\n        <DrawButton\n          disabled={entriesRemaining <= 0 || drawingInProgress}\n          type=\"button\"\n          size=\"compact\"\n          onClick={getNextWinner}\n        >\n          Draw Name\n        </DrawButton>\n\n        <EntriesLink to=\"/entries\">Entries</EntriesLink>\n      </BodyInner>\n      <LogoImage src={GravelWorlds} />\n    </Body>\n  );\n};\n","export const shuffle = (a: any[]) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n","import { styled } from \"baseui\";\nimport React, { useState, useMemo } from \"react\";\nimport GravelWorlds from \"../Images/GravelWorlds.png\";\nimport { differenceInSeconds, fromUnixTime } from \"date-fns\";\n\nconst Body = styled(\"div\", ({ $theme }) => ({\n  boxSizing: \"border-box\",\n  position: \"absolute\",\n  minHeight: \"100vh\",\n  minWidth: \"100vw\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: $theme.colors.background,\n  color: $theme.colors.foreground,\n  paddingTop: $theme.sizing.scale800,\n  paddingBottom: $theme.sizing.scale800,\n  paddingLeft: $theme.sizing.scale800,\n  paddingRight: $theme.sizing.scale800,\n  overflow: \"hidden\",\n}));\n\nconst Timer = styled(\"div\", ({ $theme }) => ({\n  position: \"absolute\",\n  display: \"flex\",\n  textAlign: \"center\",\n  top: \"40%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\",\n  zIndex: 2,\n  ...$theme.typography.font1450,\n  fontSize: $theme.sizing.scale4800,\n  fontFamily: \"'Permanent Marker', cursive\",\n}));\n\nconst TimerBlock = styled(\"div\", ({ $theme }) => ({\n  width: \"2ch\",\n  textAlign: \"center\",\n}));\n\nconst TimerSep = styled(\"div\", ({ $theme }) => ({\n  textAlign: \"center\",\n}));\n\nconst LogoImage = styled(\"img\", ({ $theme }) => ({\n  position: \"absolute\",\n  left: \"50%\",\n  top: \"50%\",\n  transform: \"translateX(-50%) translateY(-50%)\",\n  height: \"80vh\",\n  opacity: 0.25,\n  zIndex: 1,\n}));\n\nconst SECONDS_IN_HOUR = 3600;\nconst SECONDS_IN_MINUTE = 60;\n\nexport const Countdown: React.FC = () => {\n  const ToDate = useMemo(() => fromUnixTime(1599782400), []);\n  const [secondsRemaining, setSecondsRemaining] = useState<number>(\n    differenceInSeconds(ToDate, new Date())\n  );\n\n  setInterval(() => {\n    setSecondsRemaining(differenceInSeconds(ToDate, new Date()));\n  }, 300);\n\n  const hoursCountdown = useMemo(\n    () => Math.floor(secondsRemaining / SECONDS_IN_HOUR),\n    [secondsRemaining]\n  );\n  const minutesCountdown = useMemo(\n    () =>\n      Math.floor(\n        (secondsRemaining - hoursCountdown * SECONDS_IN_HOUR) /\n          SECONDS_IN_MINUTE\n      ),\n    [secondsRemaining, hoursCountdown]\n  );\n  const secondsCountdown = useMemo(\n    () =>\n      Math.floor(\n        secondsRemaining -\n          hoursCountdown * SECONDS_IN_HOUR -\n          minutesCountdown * SECONDS_IN_MINUTE\n      ),\n    [secondsRemaining, hoursCountdown, minutesCountdown]\n  );\n\n  return (\n    <Body>\n      <Timer>\n        <TimerBlock>\n          {`${secondsRemaining < 0 ? 0 : hoursCountdown}`.padStart(2, \"0\")}\n        </TimerBlock>\n        <TimerSep>:</TimerSep>\n        <TimerBlock>\n          {`${secondsRemaining < 0 ? 0 : minutesCountdown}`.padStart(2, \"0\")}\n        </TimerBlock>\n        <TimerSep>:</TimerSep>\n        <TimerBlock>\n          {`${secondsRemaining < 0 ? 0 : secondsCountdown}`.padStart(2, \"0\")}\n        </TimerBlock>\n      </Timer>\n      <LogoImage src={GravelWorlds} />\n    </Body>\n  );\n};\n","import { BaseProvider, LightTheme } from \"baseui\";\nimport React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { Entries } from \"./Pages/Entries\";\nimport { Home } from \"./Pages/Home\";\nimport { Countdown } from \"./Pages/Countdown\";\n\nconst App: React.FC = () => {\n  return (\n    <StyletronProvider value={new Styletron()}>\n      <BaseProvider theme={LightTheme}>\n        <Router>\n          <Switch>\n            <Route path=\"/entries\">\n              <Entries />\n            </Route>\n            <Route path=\"/countdown\">\n              <Countdown />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}